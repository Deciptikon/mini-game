const W2 = 200;
const H2 = 400;
const H4 = H2 / 2;
const H8 = H4 / 2;

const wb = 100;
const hb = 30;

// ===== –°–¶–ï–ù–ê –ú–ï–ù–Æ =====
class MenuScene extends Phaser.Scene {
  constructor() {
    super({ key: "MenuScene" });
  }

  create() {
    // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ (Canvas-—Ç–µ–∫—Å—Ç)
    const title = this.add
      .text(W2, H2 / 2, "–ü–∏—Ç–æ–º–µ—Ü-–≠–º–æ–¥–∑–∏", {
        fontSize: "48px",
        fontFamily: "Arial",
        color: "#ffffff",
        stroke: "#000000",
        strokeThickness: 4,
      })
      .setOrigin(0.5);

    // 2. –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç" (–ì—Ä–∞—Ñ–∏–∫–∞ + –¢–µ–∫—Å—Ç)
    const startBtn = this.add.graphics();
    startBtn.fillStyle(0x4caf50, 1); // –ó–µ–ª–µ–Ω—ã–π
    startBtn.fillRoundedRect(W2 - wb, H2 - hb, 2 * wb, 2 * hb, 16);

    const startText = this.add
      .text(W2, H2, "–ù–∞—á–∞—Ç—å", {
        fontSize: "28px",
        color: "#ffffff",
      })
      .setOrigin(0.5);

    // 3. –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π
    startBtn.setInteractive(
      new Phaser.Geom.Rectangle(W2 - wb, H2 - hb, 2 * wb, 2 * hb),
      Phaser.Geom.Rectangle.Contains
    );

    startBtn.on("pointerdown", () => {
      this.scene.start("PetScene");
    });

    // 4. –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    startBtn.on("pointerover", () => {
      startBtn.clear();
      startBtn.fillStyle(0x388e3c, 1); // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
      startBtn.fillRoundedRect(W2 - wb, H2 - hb, 2 * wb, 2 * hb, 16);
    });

    startBtn.on("pointerout", () => {
      startBtn.clear();
      startBtn.fillStyle(0x4caf50, 1);
      startBtn.fillRoundedRect(W2 - wb, H2 - hb, 2 * wb, 2 * hb, 16);
    });
  }
}

// ===== –°–¶–ï–ù–ê –ü–ò–¢–û–ú–¶–ê =====
class PetScene extends Phaser.Scene {
  constructor() {
    super({ key: "PetScene" });
    this.stats = { food: 7, mood: 5, energy: 6 };
  }

  preload() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏-—Å–ø—Ä–∞–π—Ç—ã
    this.load.image("cat", "./assets/cat.png");
    this.load.image("dog", "./assets/dog.png");
    this.load.image("bird", "./assets/bird.png");
  }

  create() {
    // 1. –ü–∏—Ç–æ–º–µ—Ü
    this.pet = this.add
      .sprite(W2, H2 * 0.6, "cat")
      .setScale(0.3)
      .setInteractive();

    // –ê–Ω–∏–º–∞—Ü–∏—è "–¥—ã—Ö–∞–Ω–∏—è"
    this.tweens.add({
      targets: this.pet,
      scale: 0.4,
      duration: 1000,
      yoyo: true,
      repeat: -1,
    });

    this.statDecayTimer = this.time.addEvent({
      delay: 3000, // 30 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      callback: this.decayStats,
      callbackScope: this,
      loop: true, // –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    });

    // 2. –°—Ç–∞—Ç—É—Å-–±–∞—Ä—ã
    this.drawStats();

    let y = H2 * 1.3;
    const s = 50;
    const x = W2;

    // 3. –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    this.createButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å", x, y, () => {
      this.stats.food = Math.min(10, this.stats.food + 2);
      this.drawStats();
      this.showEmoji("‚ù§Ô∏è", W2, H8);
    });

    y += hb + s;
    this.createButton("–ü–æ–∏–≥—Ä–∞—Ç—å", x, y, () => {
      this.stats.mood = Math.min(10, this.stats.mood + 2);
      this.drawStats();
      this.petJump();
    });

    y += hb + s;
    this.createButton("–°–ø–∞—Ç—å", x, y, () => {
      this.stats.energy = Math.min(10, this.stats.energy + 2);
      this.drawStats();
      this.showEmoji("üí§", W2, H8);
    });

    // 4. –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    this.createButton(
      "–ú–µ–Ω—é",
      50,
      50,
      () => {
        this.scene.start("MenuScene");
      },
      0x2196f3,
      100,
      40
    );
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  createButton(
    text,
    x,
    y,
    callback,
    color = 0xe91e63,
    width = 150,
    height = 50
  ) {
    const btn = this.add
      .graphics()
      .fillStyle(color, 1)
      .fillRoundedRect(x - width / 2, y - height / 2, width, height, 10)
      .setInteractive(
        new Phaser.Geom.Rectangle(x - width / 2, y - height / 2, width, height),
        Phaser.Geom.Rectangle.Contains
      );

    this.add
      .text(x, y, text, {
        fontSize: "24px",
        color: "#ffffff",
      })
      .setOrigin(0.5);

    btn.on("pointerdown", callback);

    btn.on("pointerover", () => {
      btn.clear();
      btn.fillStyle(color - 0x333333, 1);
      btn.fillRoundedRect(x - width / 2, y - height / 2, width, height, 10);
    });

    btn.on("pointerout", () => {
      btn.clear();
      btn.fillStyle(color, 1);
      btn.fillRoundedRect(x - width / 2, y - height / 2, width, height, 10);
    });

    return btn;
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–æ–≤
  drawStats() {
    if (this.statsBars) this.statsBars.clear();

    this.statsBars = this.add.graphics();
    const barWidth = 200;
    const x = W2 - barWidth / 2;
    let y = H2 * 0.9;
    const h = 20;
    const s = 15;
    const baseColor = 0x555555;
    // –ï–¥–∞
    this.statsBars.fillStyle(baseColor, 1);
    this.statsBars.fillRect(x, y, barWidth, h);
    this.statsBars.fillStyle(0x5722ff, 1);
    this.statsBars.fillRect(x, y, barWidth * (this.stats.food / 10), h);
    this.add.text(x - 10, y, "üçé", { fontSize: "20px" });

    // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    y += h + s;
    this.statsBars.fillStyle(baseColor, 1);
    this.statsBars.fillRect(x, y, barWidth, h);
    this.statsBars.fillStyle(0xffeb3b, 1);
    this.statsBars.fillRect(x, y, barWidth * (this.stats.mood / 10), h);
    this.add.text(x - 10, y, "üòä", { fontSize: "20px" });

    // –≠–Ω–µ—Ä–≥–∏—è
    y += h + s;
    this.statsBars.fillStyle(baseColor, 1);
    this.statsBars.fillRect(x, y, barWidth, h);
    this.statsBars.fillStyle(0x4caf50, 1);
    this.statsBars.fillRect(x, y, barWidth * (this.stats.energy / 10), h);
    this.add.text(x - 10, y, "‚ö°", { fontSize: "20px" });
  }

  decayStats() {
    console.log("decayStats()");
    // –£–º–µ–Ω—å—à–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–æ –Ω–µ –Ω–∏–∂–µ 0)
    this.stats.food = Math.max(0, this.stats.food - 1);
    this.stats.mood = Math.max(0, this.stats.mood - 0.5);
    this.stats.energy = Math.max(0, this.stats.energy - 0.7);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.drawStats();

    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (this.stats.food < 3) {
      this.showEmoji("üçΩÔ∏è", W2, H8);
    }
    if (this.stats.energy < 3) {
      this.showEmoji("üí§", W2, H8);
    }
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä—ã–∂–∫–∞
  petJump() {
    this.tweens.add({
      targets: this.pet,
      y: 200,
      duration: 200,
      yoyo: true,
    });
  }

  // –≠—Ñ—Ñ–µ–∫—Ç —ç–º–æ–¥–∑–∏
  showEmoji(emoji, x, y) {
    const effect = this.add
      .text(x, y, emoji, {
        fontSize: "48px",
        alpha: 0,
      })
      .setOrigin(0.5);

    this.tweens.add({
      targets: effect,
      y: y - 100,
      alpha: 1,
      duration: 800,
      onComplete: () => effect.destroy(),
    });
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Phaser (Canvas only)
const config = {
  type: Phaser.CANVAS,
  width: 2 * W2,
  height: 2 * H2,
  scene: [MenuScene, PetScene],
  backgroundColor: "#9bd6ff",
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
const game = new Phaser.Game(config);
